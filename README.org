#+TITLE: Heron: a smart event forecaster
#+AUTHOR:
#+EMAIL:
#+DATE:
#+OPTIONS: H:3 num:2 toc:nil
#+OPTIONS: ^:nil @:t \n:nil ::t |:t f:t TeX:t
#+OPTIONS: skip:nil
#+OPTIONS: author:t
#+OPTIONS: email:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: timestamps:nil
#+OPTIONS: d:nil
#+OPTIONS: tags:t
#+LANGUAGE: en
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4,dvipdfmx]
# #+LATEX_HEADER: \usepackage{plain-article}
# #+LATEX_HEADER: \renewcommand\maketitle{}
# #+LATEX_HEADER: \pagestyle{empty}
# #+LaTeX: \thispagestyle{empty}

* What is heron?
  Heron forecasts your upcoming events or visualizes your event records.

* Simple Usage

  Forecast the next event:
  #+BEGIN_SRC shell-script
  $ heron forecast <<EOF
  2013-01-14
  2014-01-13
  2015-01-12
  EOF
  2016-01-11
  #+END_SRC

  Visualize the event records:
  #+BEGIN_SRC shell-script
    # 散髪 means ``hear cut''
    $ heron visualize <<EOF
    散髪,2013/10/13
    散髪,2013/12/01
    散髪,2014/01/11
    散髪,2014/02/23
    散髪,2014/04/06
    散髪,2014/05/13
    散髪,2014/06/22
    散髪,2014/08/11
    散髪,2014/09/21
    散髪,2014/10/19
    散髪,2014/12/06
    散髪,2015/01/20
    散髪,2015/03/04
    散髪,2015/04/18
    散髪,2015/05/31
    EOF
    Listening on http://127.0.0.1:3090
    # open http://127.0.0.1:3090 in your browser
  #+END_SRC

  Heron takes the occurrence list of 2013-01-14 (Mon) ... 2015-01-12 (Mon),
  as a training data, and guesses the rule ``it happens second Monday on every January.''

  The list is longer, the forecast will be better.

* Usage
  #+BEGIN_SRC shell-script
  heron forecast [--method=METHOD] [--input=FILE] [--sampling-range=FROM-TO]
  heron visualize [--input=FILE]
  #+END_SRC

  + COMMANDS ::
    + visualize :: Visualize your event record in your web browser.
    + forecast  :: Forecast the next event occurrence from your event record.
  + METHOD :: Set the forecasting algorithm. Possible values are: =date_only=, =all= (default: date_only).
  + FILE   :: Get training occurrence list from the =FILE=.
              FILE should be in the form of:
              + A plain text that each line has YYYY-MM-DD string; or
              + SQLite DB FILE (see below in details).
  + FROM-TO :: Date range in the form of YYYY/MM/DD-YYYY/MM/DD.
               Heron noticed that the training occurrences in the list were sampled from this range.
               Since the training occurrence list does not teach NOT-OCCURRED dates, this range teaches
               heron the NOT-OCCURRED dates before the first occurrence date and after the last occurrence date.

* Install

  1) Install R language system
  2) Install SQLite
  3) In R prompt, add some packages:
     #+BEGIN_SRC R
       pkgs <- c("RSQLite", "docopt", "shiny", "stringr", "ggplot2", "scales")
       install.packages(pkgs)
      #+END_SRC

* DB schema

  Heron takes SQLite DB file as an input.
  The DB is supposed to have these tables and columns:

  + TABLE Recurrence ::
    + id: integer
    + name: string
  + TABLE Event ::
    + recurrence_id: integer
    + name: string
    + start_time: datetime
    + end_time: datetime

  Recurrence Table:
  | id | name            |
  |----+-----------------|
  |  1 | Monthly meeting |
  |  2 | Annual meeting  |

  Event Table:
  | id | name         | recurrence_id | start_time |   end_time |
  |----+--------------+---------------+------------+------------|
  |  1 | Jan meeting  |             1 | 2014-01-10 | 2014-01-10 |
  |  2 | Feb meeting  |             1 | 2014-02-10 | 2014-02-10 |
  |  3 | 2015 meeting |             2 | 2015-01-01 | 2015-01-01 |

  #+BEGIN_SRC shell-script
  $ heron forecast --rname='Monthly meeting' --input=calendar.sqlite
  2014-03-10
  #+END_SRC
